#hw3: Data Types, Functions, Conditionals, and Loops

# 1 Power of a Number
# Write a function to compute the value of x raised to the power y without using the built-in pow or ** operator.
def power(x, y):
    i = 1
    for f in range (y):
        i *= x
    return i

x=3
y=2
print (power(x,y)) #returns 9


# 2 Minimum and Maximum
# Write a function that takes a list of numbers as input and returns the minimum and maximum values in the list as a tuple. 
def min_and_max(numbers):
    return min(numbers), max(numbers)

numbers = [6, 72, 46, 5, 2, 25]
print((min(numbers), max(numbers))) # returns (2, 72)


# 3 Check Leap Year
# Write a function that takes a year as input and returns True if it’s a leap year, and False otherwise. 
# A leap year is divisible by 4 but not divisible by 100 unless it is also divisible by 400.
def is_leap_year(year):
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        return True
    else: return False

print(is_leap_year(1900)) #returns false


# 4 Calculate BMI (Body Mass Index)
# Write a function that takes a person’s weight (in kilograms) and height (in meters) as input and returns their BMI.
def bmi(weight, height):
    return 703 * weight / (height**2)

weight=120
height=70 #in inches

print(bmi(weight,height))


# 5 Rotating Digits
# Implement a function called rotate digits that takes an integer n as input and rotates its digits to the right by one position. 
# For example, given the input 12345, the function should return 51234. 
# You may *not* convert the input to a string but you can use properties of a string in your answer.
# Hint: Use modulus (%) and floor division (//).
# Ex: 12345 % 10 = 5 and 12345 // 10 = 1234 
def rotate_digits(n):
    if n< 10:
        return n
    last_digit = n % 10
    rest_of_digits = n // 10

    multiplier = 1
    while n >= 10:
        n //=10
        multiplier *= 10

    rotated_number = last_digit * multiplier + rest_of_digits

    return rotated_number

print(rotate_digits(237689))


# 6 Minimum and Maximum but with Loops
# For both minimum and maximum, write one function to manually find that value using a for loop and another to manually find it using a while loop. 
# You may not use min() or max(). In total you should have written 4 functions. 
def find_min(numbers):
    for num in numbers[1:]:
        if num < min_value:
            min_value = num

    return min_value

    while i < len(numbers):
        if numbers[i] < min_value:
            min_value = numbers[i]
        i += 1

    return min_value

    



# 7 Vowels
# Write a function which takes in a string and outputs the number of vowels. Consider only a,e,i,o,u to be vowels and do not forget about capital letters.
# Ex: vowel count(”UC Berkeley”) will return 41


# 8 Digital Root
# Write a function that takes in an integer and returns the sum of the digits (the digital root).
# Ex: digital root(12345) will return 15


